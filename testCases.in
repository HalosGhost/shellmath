################################################################
# The general testcase syntax is 
#    assertionType  expectedValue   functionUnderTest [args ... ]
#
# where assertionType is either of:
#    Code      to indicate decimal return code
#    String    to indicate the string generated as a side effect
#
# and functionUnderTest is the function name
# with the "_shellfloat_" prefix removed.
################################################################

################################
# Tests for SUPPORTING FUNCTIONS
################################

# Tests for getReturnCode()
Code 0   getReturnCode SUCCESS
Code 1   getReturnCode FAIL
Code 2   getReturnCode ILLEGAL_NUMBER

## Tests for warn()
String "Invalid decimal number argument: '2.qr'"  \
    warn "${__shellfloat_returnCodes[ILLEGAL_NUMBER]}" 2.qr

## Tests for validateAndParse():
## Validate a number, determine its type and sign, split it into parts

# Detect Invalid input
Code    2      validateAndParse NaN
String    ""   validateAndParse NaN
# Positive integers
String  "4"    validateAndParse 4
Code    64     validateAndParse 4
# Negative integers
String    9    validateAndParse -9
Code     65    validateAndParse -9
# Decimals
String  "4 2"  validateAndParse 4.2
Code    32     validateAndParse 4.2
# Negative decimals
Code    33     validateAndParse -4.2
# Scientific / exponential notation: Check all code branches
String  "340000"   validateAndParse 3.4e5
Code    64         validateAndParse 3.4e5
String  "344 4"    validateAndParse 3.444e2
Code    32         validateAndParse 3.444e2
String  34567      validateAndParse 3.4567e4
Code    64         validateAndParse 3.4567e4
String  "0 003456" validateAndParse 3.456e-3
String  "34 56"    validateAndParse 345.6e-1
String  "0 23011"  validateAndParse 23.011e-2
String  "23 011"   validateAndParse 23.011e0

####################
# Tests for ADDITION
####################
String 4     add 4
String 9     add 4 5

# Same-length decimal tails with no leading zeros, no carry across decimal point
String 2.214    add 1.105 1.109

# Carry across decimal point
String 3.8    add 1.9 1.9
String -3.8    add -1.9 -1.9

# Different-length decimals, one with leading zero
String 2.195    add 1.105 1.09
String -2.195    add -1.105 -1.09

# Same-length tails having leading zeros
String 2.014    add 1.005 1.009
# Different-length tails with and without leading zeros
String 3.31462    add 1.905 1.40962
String 2.01462    add 1.005 1.00962

# Recursive/multiple addition
#String 6 add 1 2 3

